Lifetime
    ใช้สำหรับจัดการอายุการใช้งานของข้อมูลหรือ reference เพื่อให้มั่นใจได้ว่า
    reference ที่ใช้งานใน code จะปลอดภัย ไม่มีการอ้างอิงถึงข้อมูลที่หมดอายุ
    (dangling reference) โดย rust จะใช้ borrow checker

    ** หาก reference หนึ่งชี้ไปยังข้อมูที่ถูกปล่อย (dropped) จะเกิดข้อผิดพลาด เช่น 
    dangling reference ขึ้นมา 
    
    lifetime ถูกใช้เพื่อบอกว่า ref ใด สามารถใช้งานได้ในช่วงเวลาไหน และ rust จะตรวจสอบ
    ว่า reference มีอายุการใ้ชงานสอดคล้องวกับข้อมูลที่มันชี้ไปหรือไม่

    fn main() {
        let x: i32 = 10;
        let r = &x; // r ยืม reference ของ x

        println("{}", r); // r ใช้ได้ตราบใดที่ x ยังอยู่
    } // x และ r หมดอายุพร้อมกัน

Custom Lifetime 
    เป็น concept ที่ใช้จัดการกับหน่วยความจำและการอ้งอิงข้อมูล โดยสร้างขึ้นเพื่อให้ compiler 
    ตรวจสอบความปลอดภัยของการใช้งานการอ้างอิง (reference) ในชุดคำสั่ง

    Rust ใช้ lifetime เพื่อประกันว่าการอ้างอิงจะไปชี้ไปยังข้อมูลที่ถูกทำลายไปแล้ว
    
    โดยสามารถประกาศ lifetime ได้ดังนี้ 
        fn longest<'a>(x: &'a str, y: &'a str) -> &'a str {
            if x.len() > y.len() {
                x
            } else {
                y
            }
        }

        จากชุดคำสั่งดังแล้ว 'a ใช้บอกว่า ตัวแปร x, y จะมี lifetime ที่เท่ากัน 
        คืนค่าเป็น reference ที่มี lifetime เดียวกับ input

    'a เป็น lifetime parameter โดยจะใช้ระบุอายุการใช้งานของการอ้างอิง

Static Lifetime 
    ทำให้ค่ายังอยู่ตั้งแต่โปรแกรมทำงาน จนสิ้นสุดโปรแกรม
    เช่น 
        let s: &'static str = "Helo World";

        static GLOBAL_CON = 10;